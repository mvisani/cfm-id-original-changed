FROM alpine:3.14
LABEL author="Fei Wang" 
LABEL name="CFM-ID 4 Dev ENV Image"

###########################################################################################
# Set ENV
###########################################################################################
ENV CFM_ROOT /opt/cfm
ENV PATH /opt/cfm/bin:$PATH
ARG BUILD_CFM_TRAIN="ON"
ARG BUILD_CFM_TEST="ON"
ARG MODEL_DIR="/trained_models_cfmid4.0"

############################################################################################
# DevTools for debug
############################################################################################
RUN	apk update && apk add --no-cache gdb valgrind g++ gcc make wget tar boost-dev cmake;

############################################################################################
# Installs an LP Solver
############################################################################################
RUN	cd /tmp;\
	wget -O lp_solve_src.tar.gz 'https://sourceforge.net/projects/lpsolve/files/lpsolve/5.5.2.5/lp_solve_5.5.2.5_source.tar.gz/download' ;\
	tar xvzf lp_solve_src.tar.gz;\
	rm lp_solve_src.tar.gz;

WORKDIR /tmp/lp_solve_5.5
#Patch build
# Copy headers
RUN	mkdir -p /usr/local/include/lp_solve;\
	cp ./lp_Hash.h /usr/local/include/lp_solve/lp_Hash.h;\
	cp ./lp_SOS.h /usr/local/include/lp_solve/lp_SOS.h;\
	cp ./lp_lib.h /usr/local/include/lp_solve/lp_lib.h;\
	cp ./lp_matrix.h /usr/local/include/lp_solve/lp_matrix.h;\
	cp ./lp_mipbb.h /usr/local/include/lp_solve/lp_mipbb.h;\
	cp ./lp_types.h /usr/local/include/lp_solve/lp_types.h;\
	cp ./lp_utils.h /usr/local/include/lp_solve/lp_utils.h;\
	cd ./lpsolve55 && sh ccc;\
	mkdir -p /usr/local/lib/lp_solve;\
	cp ./bin/ux64/liblpsolve55.so /usr/local/lib/liblpsolve55.so;\
	cp ./bin/ux64/liblpsolve55.a /usr/local/lib/liblpsolve55.a;\
 	rm -rf /tmp/lp_solve_5.5;

############################################################################################
# Build RdKit
############################################################################################
# download rdkit
ARG RDKit_VERSION="2017_09_3"
RUN cd /tmp;\
	wget -O rdkit.tar.gz https://github.com/rdkit/rdkit/archive/Release_${RDKit_VERSION}.tar.gz ;\
	tar xvzf rdkit.tar.gz;\
	rm rdkit.tar.gz;

WORKDIR /tmp/rdkit-Release_${RDKit_VERSION}
# build and install rdkit
# DRDK_OPTIMIZE_NATIVE set to OFF since we are building for docker
RUN mkdir build;\
	cd build;\
	cmake .. -DRDK_PGSQL_STATIC=OFF -DRDK_BUILD_PYTHON_WRAPPERS=OFF -DRDK_BUILD_CPP_TESTS=OFF -DRDK_BUILD_DESCRIPTORS3D=OFF -DRDK_INSTALL_STATIC_LIBS=OFF -DRDK_INSTALL_INTREE=OFF -DRDK_BUILD_INCHI_SUPPORT=ON -DRDK_OPTIMIZE_NATIVE=OFF -DCMAKE_CXX_STANDARD=11 -DCMAKE_BUILD_TYPE=Release;\
	make install -j 12;\
	mkdir -p /usr/local/include/rdkit/External/INCHI-API/;\
	cp ../External/INCHI-API/*.h /usr/local/include/rdkit/External/INCHI-API/;\
	rm -rf /tmp/rdkit-Release_${RDKit_VERSION};

############################################################################################
# Build MPICH
############################################################################################
# Source is available at http://www.mpich.org/static/downloads/

# Build Options:
# See installation guide of target MPICH version
# Ex: http://www.mpich.org/static/downloads/3.2/mpich-3.2-installguide.pdf
# These options are passed to the steps below
ARG MPICH_VERSION="3.2"
ARG MPICH_CONFIGURE_OPTIONS="--disable-fortran"
ARG MPICH_MAKE_OPTIONS

# Download, build, and install MPICH
RUN mkdir /tmp/mpich-src
WORKDIR /tmp/mpich-src
RUN wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz \
      && tar xfz mpich-${MPICH_VERSION}.tar.gz  \
      && cd mpich-${MPICH_VERSION}  \
      && ./configure ${MPICH_CONFIGURE_OPTIONS}  \
      && make ${MPICH_MAKE_OPTIONS} && make install -j 12\
      && rm -rf /tmp/mpich-src;
